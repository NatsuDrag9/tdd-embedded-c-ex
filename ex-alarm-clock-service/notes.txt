Alarm Clock Service (ACS)

Generic notes:
1.) Updated dockerfile by changing base OS architecture to "FROM ubuntu:22.04"

2.)

-----------------------------------------------------------------------------------------------------
Medium article notes:

Question
Test-drive an alarm clock service that keeps a list of time call-
backs. In production, the timer interrupt will ping the time service
every 100 milliseconds. When a scheduled action is ready to run,
call the callback function.

1.) Notes on the design:
The architecture of the alarm clock service is shown below. Similar to architecture of the led scheduler (Fig 8.2, 8.3 and 8.4), the alarm clock service has two transitive dependencies on the hardware -- a buzzer controller and an RTOS for timer interrupts. The buzzer controller sets the buzzer either to buzz or OFF. The client can also snooze an alarm.

A buzzer does not have multiple event unlike the led scheduler where each led light light/strip has 128 events.

I set the maximum number of alarms that can be created for one buzzer to 32 (picked the number myself).

Figures / UML diagrams

(a) Some of the tests of ACS are directly taken from the light scheduler because their architecture and functionalities are similar. 

(b) When the date and time is right, the alarms are triggered by default and another callback function expecting the following two options as parameters is called:
(i) Turn off
(ii) Snooze`

(c) The snooze option is by default set to 5 min and cannot be changed.

(d) It is given that the timer interrupt of the underlying RTOS pings every 100 ms

The test list is shown below


2.) Project directory changes:
(a)) Unlike ex-led-scheduler, this project does not use cpputest-starter-project because I created the test makefile and the tests myself. This removes the dependency on the cpputest-starter-project when building the docker image

3.) Resources used:
(a) It is recommended to provide absolute paths to the variables declared in CppUTest's MakefileWorker.To dynamically generate absolute paths within test makefile, follow the instructions by Matheus Marques in https://matheusmbar.com/bugfree-robot/2019/04/05/makefile-first-test.html 

(b) Shawn Hymel's Intro to CI/CD part 3 helped me create my own CI workflow using github actions and structure my project directory accordingly. I also created my own test makefile that defines the variables MakefileWorker.mk
https://www.youtube.com/watch?v=lZWFmEhIhpY

(c)