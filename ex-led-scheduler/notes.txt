Notes on tests:

1.) Completed all the test cases except RemoveRecyclesScheduleSlot as I could not resolve test failure pertaining to RemoveRecyclesScheduleSlot

2.) In the medium article, draw the architecture flow diagram

3.) I faced two challenges in this exercise: 
(i) Principle of linktime substitution _ This was tricky in the beginning but I eventually understood the principle after implementating test doubles for each of the interfaces.

(ii) Little to no understanding of the architecture and each component's functionality of the led-scheduler application made it difficult to develop test doubles. I had to read the sections that briefly describe the architecture (8.2, 8.3 and 8.4) multiple times during the implementation of the test doubles. Although the book elaborates on the functionality of each component of the led-scheduler application in the example tests, I would have preferred an elaborate description on the application and its components before the process developing test cases. However, it also exposed me to a situation which requires development of test cases without having a concrete understanding of the application (or/and requirements).

Notes on bulding the project and build automation using Github Actions
1.) Made the project modular
After removing cpputest and cpputest-starter-project from this project directory even for the build process using autotools, I changed the folder structure with the unit tests and test makefile in ex-unit-tests/. 

The makefile in the project's root directory controls the execution of the project (make, make test, make clean, make clean_test -- refer readme file).

2.) Build automation and CI using Github Actions
I created a unit_tests_led_scheduler.yml which was taken from Shawn Hymel's "Intro to CI/CD Part 3" (https://youtu.be/lZWFmEhIhpY?t=2681).
The dockerfile was modified to copy unit tests and test makefile from ex-unit-tests/.

3.) Time Consuming
It took me three days to understand and implement the build automation using Github Actions in a presentable manner. It was important to make the repository and the project directory presentable because:
(i) If asked, I have to talk about this process in the interview
(ii) I could not visualize the final presentable output so I was experimenting with different possibilites (like creating multiple branches, watching videos on using Jenkins for embedded systems) until I found an elegant one (thanks to Shawn)

Build automation using Jenkins Freestyle project
1.) Jenkins setup same as the steps mentioned in the question of https://stackoverflow.com/questions/46822898/ip-address-of-localhost8080-in-webhooks-of-github-jenkins
2.) ngrok installation - https://stackoverflow.com/questions/46822898/ip-address-of-localhost8080-in-webhooks-of-github-jenkins

Build automation using Jenkins Freestyle project
1.) Jenkins setup same as the steps mentioned in the question of https://stackoverflow.com/questions/46822898/ip-address-of-localhost8080-in-webhooks-of-github-jenkins
2.) ngrok installation - https://stackoverflow.com/questions/46822898/ip-address-of-localhost8080-in-webhooks-of-github-jenkins